// Generated by CoffeeScript 1.7.1
(function() {
  var app, express, web, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  express = require('express');

  _ = require("lodash");

  app = express();

  web = (function() {
    web.COMMANDS = [
      {
        command: /^(broadcast|tellall) \S+/i,
        when: null,
        method: "broadcast",
        commandLength: 1
      }
    ];

    function web(bot) {
      this.broadcast = __bind(this.broadcast, this);
      this.tell = function(server, channel, message) {
        var client, _i, _len, _ref, _results;
        if (!((message != null) && !_.isEmpty(message))) {
          return;
        }
        if ((server != null) && (channel != null)) {
          if (channel[0] !== "#") {
            channel = "#" + channel;
          }
          client = _.find(bot.clients, function(c) {
            return c.serverInfo.url === server.split(":")[0].trim();
          });
          if (client != null) {
            return client.say(channel, message);
          } else {
            throw new Error("nf");
          }
        } else {
          _ref = bot.clients;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            client = _ref[_i];
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = client.serverInfo.channels;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                channel = _ref1[_j];
                _results1.push(client.say(channel, "Broadcast: " + message));
              }
              return _results1;
            })());
          }
          return _results;
        }
      };
      app.get("/", function(req, res) {
        var x;
        return res.send(JSON.stringify({
          servers: (function() {
            var _i, _len, _ref, _results;
            _ref = bot.clients;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push({
                url: x.serverInfo.url,
                port: x.serverInfo.port,
                channels: x.serverInfo.channels,
                username: x.serverInfo.username
              });
            }
            return _results;
          })(),
          modules: _.keys(bot.modules)
        }));
      });
      app.post("/tell", (function(_this) {
        return function(req, res) {
          var data;
          data = "";
          req.on("data", function(blob) {
            return data += blob;
          });
          return req.on("end", function() {
            var channel, e, message, server, _ref;
            _ref = JSON.parse(data), message = _ref.message, server = _ref.server, channel = _ref.channel;
            if (!((message != null) && _.isString(message) && !_.isEmpty(message))) {
              res.status(403).json({
                error: "message cannot be null or empty string.",
                success: false
              });
            }
            try {
              _this.tell(server, channel, message);
              return res.json({
                success: true
              });
            } catch (_error) {
              e = _error;
              if (e.message === "nf") {
                return res.status(404).json({
                  error: "Server with url " + server + " not found.",
                  success: false
                });
              } else {
                return res.status(500).json({
                  error: e.message,
                  detailed: e,
                  success: false
                });
              }
            }
          });
        };
      })(this));
      this.server = app.listen(1337, function() {
        return console.log("Module web is loaded at port 1337.");
      });
    }

    web.prototype.destruct = function(code) {
      return server.close();
    };

    web.prototype.broadcast = function(bot, out, isPublic, from, to, command, params, message) {
      var channel, inString, param, server, singleParams, _i, _len, _params;
      _params = [];
      singleParams = [];
      inString = false;
      for (_i = 0, _len = params.length; _i < _len; _i++) {
        param = params[_i];
        if (_.contains([0, param.length - 1], param.indexOf('"'))) {
          inString = true;
        }
        if (param[0] === '"') {
          param = param.slice(1);
        } else if (param[param.length - 1] === '"') {
          param = param.substring(0, param.length - 1);
        }
        if (!inString) {
          singleParams.push(param);
        }
        _params.push(param);
      }
      if (inString) {
        singleParams.push("<msg>");
      }
      params = _params;
      server = channel = message = null;
      if (singleParams.length === 3) {
        server = params[0];
        channel = params[1];
        message = params.slice(2).join(" ");
      } else if (singleParams.length === 2) {
        server = bot.currentClient.serverInfo.url;
        channel = params[0];
        message = params.slice(1).join(" ");
      } else if (singleParams.length === 1) {
        message = params.join(" ");
      }
      return this.tell(server, channel, message);
    };

    return web;

  })();

  module.exports = web;

}).call(this);
