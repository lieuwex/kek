// Generated by CoffeeScript 1.7.1
(function() {
  var Magister, MagisterSchool, magisterIRC, magisterJS, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require("lodash");

  magisterJS = require("magister.js");

  Magister = magisterJS.Magister;

  MagisterSchool = magisterJS.MagisterSchool;

  Date.prototype.addDays = function(days) {
    this.setDate(this.getDate() + days);
    return this;
  };

  magisterIRC = (function() {
    magisterIRC.COMMANDS = [
      {
        rawCommand: /^magister create \S+ \S+ \S+$/i,
        when: "pm",
        method: "register",
        commandLength: 2
      }, {
        command: /^magister time/i,
        when: null,
        method: "time",
        commandLength: 2
      }
    ];

    function magisterIRC(bot) {
      this.time = __bind(this.time, this);
      this.register = __bind(this.register, this);
      this.store = function(key, value) {
        if (key != null) {
          return bot.store("m_" + key, value);
        } else {
          return void 0;
        }
      };
      this.check = function(name) {
        var val;
        val = this.store(name);
        if (val == null) {
          bot.currentClient.notice(name, "--- You're not registered. Register with /msg magisterIRC create <schoolname> <username> <password> ---");
        }
        return val;
      };
    }

    magisterIRC.prototype.register = function(bot, out, isPublic, from, to, command, params, message) {
      if (!this.store(from)) {
        return MagisterSchool.getSchools(params[0], (function(_this) {
          return function(e, r) {
            if (e != null) {
              return out("--Something has gone wrong--");
            } else {
              return _this.store(from, {
                school: r[0],
                username: params[1],
                password: params[2]
              });
            }
          };
        })(this));
      } else {
        return out("--- Already registered. ---");
      }
    };

    magisterIRC.prototype.time = function(bot, out, isPublic, from, to, command, params, message) {
      var val;
      if ((val = this.check(from)) == null) {
        return;
      }
      return new Magister(val.school, val.username, val.password, false).ready(function(m) {
        return m.appointments(new Date(), new Date().addDays(3), function(e, r) {
          var appointment;
          if (e != null) {
            return out("--Something has gone wrong--");
          } else {
            appointment = _.find(r, function(a) {
              return !a.fullDay() && _.contains([8, 9, 10, 11, 12, 13, 14, 15, 16, 17], a.begin().getHours());
            });
            return out("--- First lesson " + (isPublic ? "for " + from : "") + " @ " + (appointment.begin()) + " (" + (appointment.classes()[0]) + ") ---");
          }
        });
      });
    };

    return magisterIRC;

  })();

  module.exports = magisterIRC;

}).call(this);
